<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>false</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Modify a Standard Change Template">f01b22661b0940104252c8017e4bcb10</cat_item>
        <cat_variable/>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>Pre-populate Proposal to Modify </name>
        <order/>
        <script><![CDATA[function onLoad() {
	var stdChangeProducerSysId = getParmVal('std_change_producer');
	if (stdChangeProducerSysId) {
		g_form.setValue('variables.std_change_producer', stdChangeProducerSysId);
		populateValsFromMod(stdChangeProducerSysId);

		populateAttachments(stdChangeProducerSysId, false);
	}
}

function populateValsFromMod(newValue) {
	//Populate Template Values From 'Template to modify'
	ga = new GlideAjax('StdChangeUtils');
	ga.addParam('sysparm_name', 'getTemplNCategoryForModify');
	ga.addParam('sysparm_tableName', 'std_change_record_producer');
	ga.addParam('sysparm_sysid', newValue);
	ga.setWantSessionMessages(false);
	ga.getXML(function(resp) {
		var parsedResp = toJson(resp);
		g_form.setValue('variables.category', parsedResp.category);
	});
}

function tagToObj(tag, detectValue) {
	var ans = {};
	var attrs = tag.attributes;
	if (attrs.length == 1 && tag.getAttribute('value')) {
		ans = tag.getAttribute('value');
	} else {
		for (var i = 0; i < attrs.length; i++) {
			var attr = attrs.item(i);
			ans[attr.name] = attr.value;
		}
	}
	return ans;
}

function toJson(resp) {
	var ans = {};
	var tags = resp.responseXML.documentElement.childNodes;
	for (var i = 0; i < tags.length; i++) {
		var tag = tags.item(i);
		var tagName = tag.nodeName;
		if (tag.getAttribute('idx')) { //Then this is array
			if (!ans[tagName])
				ans[tagName] = [];
			ans[tagName].push(tagToObj(tag, false));
		} else {
			ans[tagName] = tagToObj(tag, true);
		}
	}
	return ans;
}

function getParmVal(name) {
	name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
	var regexS = "[\\?&]" + name + "=([^&#]*)";
	var regex = new RegExp(regexS);
	var results = regex.exec(window.location.href);
	if (results) {
		return unescape(results[1]);
	} else {
		return '';
	}
}

function populateAttachments(stdChangeProducerSysId, removeExisting){

	var itemGUID = gel('sysparm_item_guid');

	var copyAttAj = new GlideAjax('StdChangeUtils');
	copyAttAj.addParam('sysparm_name', 'copyAttachments');
	copyAttAj.addParam('sysparm_srcTable', 'std_change_record_producer');
	copyAttAj.addParam('sysparm_srcSysId', stdChangeProducerSysId);
	copyAttAj.addParam('sysparm_targetTable', 'std_change_proposal');
	copyAttAj.addParam('sysparm_targetSysId', itemGUID.value);
	copyAttAj.addParam('sysparm_removeExisting', removeExisting);
	copyAttAj.getXML(processAttachments);
}

function processAttachments(response) {
	// get attachmentInfo elements
	var attachments = response.responseXML.getElementsByTagName("attachmentInfo");
	var deletedAttachmentIds = '';

	for ( var i = 0; i < attachments.length; i++) {
		var id = attachments[i].getAttribute("id");
		var name = attachments[i].getAttribute("name");
		var imgSrc = attachments[i].getAttribute("imgSrc");
		var action = attachments[i].getAttribute("action");

		if ('delete' == action) {
			deletedAttachmentIds += ';' + id;
		}
		else if ('add' == action) {
			addAttachmentNameToForm(id, name, "New", imgSrc, "true", "true");
		}
	}

	if(deletedAttachmentIds != '')
		deleteExistingAttachments(deletedAttachmentIds);
}

// this get called after attachments are deleted to update the display
function deleteExistingAttachments(sysIds) {
	var itemGUID = gel('sysparm_item_guid');

	var modified = $("attachments_modified");
	if (modified)
		modified.value = "true";
	var header_attachment = $('header_attachment');

	var idArray = sysIds.split(";");
	for (var i=0; i<idArray.length; i++) {
		var id = idArray[i];
		if(id)
			changeCount(itemGUID.value, 'decrease');

		e = gel("attachment_" + id);
		if (e)
			rel(e);
	}

	var more_attachments = $('more_attachments');
	if (more_attachments && header_attachment)
		if( (computeAttachmentWidth() - 20) >= (header_attachment.getWidth() - more_attachments.getWidth()))
		more_attachments.style.display = 'block';
	else
		more_attachments.style.display = 'none';
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>jesse.haddad@flyform.com</sys_created_by>
        <sys_created_on>2019-11-14 11:58:58</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>370ab2a61b4940104252c8017e4bcb39</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Pre-populate Proposal to Modify </sys_name>
        <sys_overrides/>
        <sys_package display_value="UK ITSM" source="x_sksw_uk_itsm">7889315b1bd04410eb7365386e4bcbbb</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="UK ITSM">7889315b1bd04410eb7365386e4bcbbb</sys_scope>
        <sys_update_name>catalog_script_client_370ab2a61b4940104252c8017e4bcb39</sys_update_name>
        <sys_updated_by>jesse.haddad@flyform.com</sys_updated_by>
        <sys_updated_on>2019-11-14 11:59:27</sys_updated_on>
        <table/>
        <type>onLoad</type>
        <ui_type>0</ui_type>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
