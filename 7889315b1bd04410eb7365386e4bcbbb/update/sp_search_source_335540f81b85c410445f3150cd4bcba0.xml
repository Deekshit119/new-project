<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_search_source">
    <sp_search_source action="INSERT_OR_UPDATE">
        <advanced_typeahead_config>false</advanced_typeahead_config>
        <condition/>
        <data_fetch_script><![CDATA[var queryLocation = queryLocation || 0;
var count = count || 30;
var facets = facets || {};
(function(query, queryLocation, count, facets) {
			
	return doContextualSearch(query, count, facets, queryLocation);
		
	function doContextualSearch(query, count, facets, queryLocation) {
		var results = [];
		
		var kbArray = [];
		if(facets.kb_knowledge_base)
			kbArray.push(facets.kb_knowledge_base);
		else {
			var kbs = $sp.getKnowledgeBases();
			if(!gs.nil(kbs))
				kbArray = kbs.split(',');
		}

		// Set up request
		var request = {
			keyword : query,
			language : "",
			variables : {
				kb_knowledge_base : kbArray,
				kb_category : facets.category,
				author : [facets.author]
			},
			resource : 'Knowledge',
			context : gs.getProperty('glide.knowman.sp.search_context', 'Knowledge Search'),
			kb_query : getFacetQuery(facets),
			social_query : "",
			order : "relevancy,true",
			start : queryLocation,
			end : count,
			attachment : false,
			knowledge_fields : [
				"number",
				"sys_id",
				"published"
			]
		};
			
		if (JSUtil.notNil(data.limit) && !isNaN(data.limit))
			request.end = data.limit;			

		// execute search return result
		var response = new KBPortalServiceImpl().getResultData(request);

		// Send results back ro UI
		var kbCount = 0;
		for (var i = 0; i < response.results.length; i++) {
			result = response.results[i];
			var article = {};
			article.sys_id = result.meta.sys_id.display_value;
			article.number = result.meta.number.display_value;
			article.short_description = result.title;
			article.published = result.meta.published.display_value;
			article.publishedUTC = result.meta.published.display_value;
			article.type = "kb";
			article.text = result.snippet || "";
			article.text = $sp.stripHTML(article.text) + "";
			article.text = article.text.substring(0, 200);
			article.score = result.meta.score;
			article.label = article.short_description;
			article.primary = article.short_description;
			article.query_location = queryLocation+kbCount;
			results.push(article);
			
			kbCount++;
		}

		$sp.logSearch('kb_knowledge', query, kbCount, data.searchType);
		
		if (results.length == 0)
			return results;
				
		var lastResult = results.pop();
				
		if(results.length <= count) {
			lastResult.isLastResult = true;
			results.push(lastResult);
		}
				
		return results;
	}
			
	// Build the kb_query based on facets
	function getFacetQuery(facets) {
		var kbFacetMap = {
			// updated
			"more_ago"  : "^sys_updated_onRELATIVEGT@year@ago@2",
			"year_ago"  : "^sys_updated_onRELATIVEGT@year@ago@1",
			"month_ago" : "^sys_updated_onRELATIVEGT@month@ago@1",
			"week_ago"  : "^sys_updated_onRELATIVEGT@dayofweek@ago@7",
			"day_ago"   : "^sys_updated_onRELATIVEGT@dayofweek@ago@1",
					
			// viewcount
			"more_than_500" : "^sys_view_count>500",
			"more_than_200" : "^sys_view_count>200",
			"more_than_100" : "^sys_view_count>100",
			"more_than_50"  : "^sys_view_count>50",
			"more_than_10"  : "^sys_view_count>10",
			"less_than_10"  : "^sys_view_count<10"
		};
						
		// Fill in facet info into kbQuery
		var kbQuery = "";
		if (facets.updated)
			kbQuery += kbFacetMap[facets.updated];
		if (facets.viewcount)
			kbQuery += kbFacetMap[facets.viewcount];
				
		// return built up query, stripping away leading ^
		return (kbQuery.startsWith("^"))? kbQuery.substring(1): kbQuery;
	}
})(query, queryLocation, count, facets);]]></data_fetch_script>
        <display_fields/>
        <enable_typeahead>true</enable_typeahead>
        <facet_generation_script><![CDATA[(function(query, facetService, searchResults) {

	/* Calculate your facets here using facetService */
	/* var stateFacet = facetService.createFacet('State', 'state'); */
	/* stateFacet.addFacetItem('Facet Item Label', '123'); */

	// If no facets selected and no results, don't show any facets
	if(searchResults.length == 0 && Object.keys(facets).length == 0)		
		return;
		
	var kbLabelMap = {
		more_than_500: "More Than 500",
		more_than_200: "More Than 200",
		more_than_100: "More Than 100",
		more_than_50: "More Than 50",
		more_than_10: "More Than 10",
		less_than_10: "Less Than 10",
		more_ago: "Past 2 Years",
		year_ago: "Past Year",
		month_ago: "Past Month",
		week_ago: "Past Week",
		day_ago: "Past 24 Hours"
	};
	
	var kbArray = [];
	var kbQuery='';
	var kbQueryDataObj = {};
	var kbQueryData = '';
	
	var kbs = $sp.getKnowledgeBases();
	
	if(!gs.nil(kbs)) {
		kbArray = kbs.split(',');
		kbQuery = 'kb_knowledge_baseIN'+kbs;
		kbQueryDataObj = {value: 'kb', dynamic:false, filters:[{id:'kb', label:'Knowledge base', order:1, query:[{display_value: kbQuery, table: 'kb_knowledge', value: kbQuery}]}]};
		kbQueryData = JSON.stringify(kbQueryDataObj);
	}
	
	var kbFacets = new KBPortalServiceImpl().getAllFacets(query, 'en',
		'{"kb_knowledge_base":{"aggregate":false,"include_null":false,"orderby":"label","table":"kb_knowledge","value":[]}, "author":{"aggregate":false,"include_null":false,"orderby":"label","table":"kb_knowledge","value":[]},"kb_category":{"aggregate":false,"include_null":true,"orderby":"label","table":"kb_knowledge","value":[]}}',
		'{' + (kbQueryData ? 'kb:'+kbQueryData + "," : "") + '"modified":{"dynamic":false,"filters":[{"id":"more_ago","label":"Past 2 Years","order":5,"query":[{"display_value":"sys_updated_onRELATIVEGT@year@ago@2^sys_updated_onRELATIVELT@year@ago@1","table":"","value":"sys_updated_onRELATIVEGT@year@ago@2"}]},{"id":"year_ago","label":"Past Year","order":4,"query":[{"display_value":"sys_updated_onRELATIVEGT@year@ago@1^sys_updated_onRELATIVELT@month@ago@1","table":"","value":"sys_updated_onRELATIVEGT@year@ago@1"}]},{"id":"month_ago","label":"Past Month","order":3,"query":[{"display_value":"sys_updated_onRELATIVEGT@month@ago@1^sys_updated_onRELATIVELT@dayofweek@ago@7","table":"","value":"sys_updated_onRELATIVEGT@month@ago@1"}]},{"id":"week_ago","label":"Past Week","order":2,"query":[{"display_value":"sys_updated_onRELATIVEGT@dayofweek@ago@2^sys_updated_onRELATIVELT@dayofweek@ago@1","table":"","value":"sys_updated_onRELATIVEGT@dayofweek@ago@7"}]},{"id":"day_ago","label":"Past 24 Hours","order":1,"query":[{"display_value":"sys_updated_onRELATIVEGT@dayofweek@ago@1","table":"","value":"sys_updated_onRELATIVEGT@dayofweek@ago@1"}]}],"value":""},"resources":{"dynamic":true,"filters":"","value":"Knowledge"},"view_count":{"dynamic":false,"filters":[{"id":"more_than_500","label":"More Than 500","order":6,"query":[{"display_value":"sys_view_count>500","table":"kb_knowledge","value":"sys_view_count>500"}]},{"id":"more_than_200","label":"More Than 200","order":5,"query":[{"display_value":"sys_view_count>200^sys_view_count<500","table":"kb_knowledge","value":"sys_view_count>200"}]},{"id":"more_than_100","label":"More Than 100","order":4,"query":[{"display_value":"sys_view_count>100^sys_view_count<200","table":"kb_knowledge","value":"sys_view_count>100"}]},{"id":"more_than_50","label":"More Than 50","order":3,"query":[{"display_value":"sys_view_count>50^sys_view_count<100","table":"kb_knowledge","value":"sys_view_count>50"}]},{"id":"more_than_10","label":"More Than 10","order":2,"query":[{"display_value":"sys_view_count>10^sys_view_count<50","table":"kb_knowledge","value":"sys_view_count>10"}]},{"id":"less_than_10","label":"Less Than 10","order":1,"query":[{"display_value":"sys_view_count<11","table":"kb_knowledge","value":"sys_view_count<11"}]}],"value":""}}',
		'sys_view_count,true');

	var kbFacetObj = JSON.parse(kbFacets);
	
	if(kbFacetObj.kb_knowledge_base && kbFacetObj.kb_knowledge_base.length > 1)
		createVariableFacetFromKB("Knowledge Base", "kb_knowledge_base", kbFacetObj.kb_knowledge_base, 'label');
	createVariableFacetFromKB("Author", "author", kbFacetObj.author, 'label');
	createMultiChoiceFacetFromKB("Category", "category", kbFacetObj.kb_category, 'order');
	createVariableFacetFromKB("Last Modified", "updated", kbFacetObj.modified, 'order');
	createVariableFacetFromKB("View Count", "viewcount", kbFacetObj.view_count, 'order');

	function createVariableFacetFromKB(label, variable, values, orderBy){
		if(!values || values.length == 0) 
			return;

		var kbFacet = facetService.createFacet(label, variable);
		
		if(orderBy)
			values.sort(function(a, b){
				if(a[orderBy] < b[orderBy]) 
					return -1;
				if(a[orderBy] > b[orderBy]) 
					return 1;
				return 0;
		});
				
		if (facets.author && variable == 'author') 
			kbFacet.addFacetItem(getLabel(values, facets[variable]), facets[variable]);
		else if (facets.updated && variable == 'updated' && kbLabelMap[facets.updated]) 
			kbFacet.addFacetItem(kbLabelMap[facets.updated], facets.updated);
		else if (facets.viewcount && variable == 'viewcount' && kbLabelMap[facets.viewcount]) 
			kbFacet.addFacetItem(kbLabelMap[facets.viewcount], facets.viewcount);
		else if (facets.kb_knowledge_base && variable == 'kb_knowledge_base')
			kbFacet.addFacetItem(getLabel(values, facets[variable]), facets[variable]);
		else {
			for(var i in values)
				kbFacet.addFacetItem(values[i].label, values[i].id);
		}
	}
	
	function createMultiChoiceFacetFromKB(label, variable, values, orderBy){
		if(!values || values.length == 0) 
			return;
		
		var kbFacet = facetService.createMultiChoiceFacet(label, variable);
		
		if(orderBy)
			values.sort(function(a, b){
				if(a[orderBy] < b[orderBy]) 
					return -1;
				if(a[orderBy] > b[orderBy]) 
					return 1;
				return 0;
		});
		
		var kbMap = {};
		for(var i in values) {
			var key = values[i].label;
			var value = values[i].id;			
			if(!kbMap[key]) 
				kbMap[key] = value;
			else 
				kbMap[key] += "," + value;								
		}
		
		for(var mapLabel in kbMap) {
			kbFacet.addFacetItem(mapLabel, kbMap[mapLabel]);
		}
	}

	function getLabel(values, id) {
		for (var i in values) {
			if(values[i].id == id)
				return values[i].label;
		}
		return "";
	}
})(query, facetService, searchResults);]]></facet_generation_script>
        <id>uk_kb</id>
        <is_scripted_source>true</is_scripted_source>
        <name>Skanka UK Knowledge Bases</name>
        <page display_value="kb_article">dea5792147132100ba13a5554ee4902d</page>
        <pagination_supported>false</pagination_supported>
        <primary_display_field/>
        <roles/>
        <search_page_template><![CDATA[<div>
  <a href="?id=kb_article&amp;sys_id={{item.sys_id}}" class="h4 text-primary m-b-sm block">
    <i class="fa fa-book m-r-sm"></i>
    <span ng-bind-html="highlight(item.short_description, data.q)"></span></a>
  <p ng-bind-html="highlight(item.text, data.q)"></p>
  <span class="text-muted">${Article}: {{item.number}}</span>
  <span class="text-muted">
    <span class="m-l-xs m-r-xs" aria-hidden="true"> &middot; </span>
    ${Published}: <sn-day-ago date="item.publishedUTC"/>
  </span>
</div>]]></search_page_template>
        <source_table/>
        <sys_class_name>sp_search_source</sys_class_name>
        <sys_created_by>erdinc.pinar@flyform.com</sys_created_by>
        <sys_created_on>2019-11-08 12:22:10</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>335540f81b85c410445f3150cd4bcba0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Skanka UK Knowledge Bases</sys_name>
        <sys_package display_value="UK ITSM" source="x_sksw_uk_itsm">7889315b1bd04410eb7365386e4bcbbb</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="UK ITSM">7889315b1bd04410eb7365386e4bcbbb</sys_scope>
        <sys_update_name>sp_search_source_335540f81b85c410445f3150cd4bcba0</sys_update_name>
        <sys_updated_by>erdinc.pinar@flyform.com</sys_updated_by>
        <sys_updated_on>2019-11-08 12:22:10</sys_updated_on>
        <typeahead_glyph/>
        <typeahead_template/>
    </sp_search_source>
    <sys_translated_text action="delete_multiple" query="documentkey=335540f81b85c410445f3150cd4bcba0"/>
</record_update>
